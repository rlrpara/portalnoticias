name: SonarCloud
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Begin
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Setup .NET 5
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.202'

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool update --global dotnet-sonarscanner

      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Install dotnet tools to generate test report
          dotnet tool install --global dotnet-reportgenerator-globaltool

          # Start sonarqube process
          dotnet build-server shutdown
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"rlrpara_portalnoticias" /o:"rlrpara" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="%CD%\TestResults\coverage.opencover.xml" /d:sonar.exclusions="/bin//,/obj//,/Migrations/" /d:sonar.coverage.exclusions=“test/**”

          # Build solution
          dotnet restore ./PortalNoticiasProject/PortalNoticiasProject.sln
          dotnet build ./PortalNoticiasProject/PortalNoticiasProject.sln

          # Running unit tests - 'opencover ' output format
          dotnet test ./PortalNoticiasProject/PortalNoticiasProject.sln /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput="%CD%/TestResults/"
          reportgenerator -reports:"%CD%/TestResults/*.xml" -targetdir:./TestResults/Reports/ -reportTypes:“HTML;HTMLInline;Cobertura”

          # Send test report result to codeclimate
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"